Below are the complete setup instructions for running the CLI chat program with GPG encryption on both Linux and Windows, consolidating all the steps needed to get it working based on the final client.py and server.py provided. These instructions cover prerequisites, key setup, server and client configuration, and running the program, ensuring encryption, /connect, /quit, /exit, and other features work as expected.

Complete Setup Instructions for Linux and Windows

Prerequisites
Install Python:
Linux: Python 3 is usually pre-installed. Check with:
python3 --version
Install if needed (e.g., Ubuntu):
sudo apt update
sudo apt install python3 python3-pip


Windows: Download and install Python 3 from python.org. Ensure pip is included and add Python to your PATH during installation. Check:
python --version

Install GPG:
Linux: Install GnuPG:

sudo apt install gnupg  # Ubuntu/Debian
sudo yum install gnupg  # CentOS/RHEL

Windows: Install Gpg4win from gpg4win.org. Verify:
gpg --version

Install Python Dependencies:
Install required packages for both platforms:

pip install python-gnupg pyperclip

Windows Only: Install windows-curses for the CLI interface:

pip install windows-curses

Directory Structure:
The keys/ directory will store public keys (e.g., user_domain.com.pub).

GPG Key Setup
Generate a GPG Key Pair (if not already done):
Run:
gpg --gen-key

Follow prompts to create a key:
Select RSA (default).
Choose a key size (e.g., 2048).
Set expiration (e.g., 0 for no expiration).
Enter your name and email (e.g., user <user@domain.com>).
Set a passphrase (optional but recommended; note it for the client).

Verify the key:
gpg --list-secret-keys
Example output:
sec   rsa2048 2023-01-01 [SC]
      ABCDEF1234567890
uid           [ultimate] user <user@domain.com>

Export Your Public Key:
Export your public key to the keys/ directory:
gpg --armor --output keys/user_domain.com.pub --export user@domain.com
Replace user@domain.com with your email or key ID.
Rename the file to match your key ID (sanitized, e.g., user_domain.com.pub for user@domain.com or ABCDEF1234567890.pub for the fingerprint). The script sanitizes @ to _ for filenames.

Share Public Keys:
Share your public key (e.g., keys/user_domain.com.pub) with other users.
Obtain other users’ public keys and place them in keys/ (e.g., bob_domain.com.pub for bob@domain.com).
Ensure filenames match the MY_KEY_ID used by each user (e.g., user@domain.com → user_domain.com.pub).

Verify Key Setup:
Check the keys/ directory:

ls keys/
Example: user_domain.com.pub, bob_domain.com.pub.
Test encryption/decryption:

echo "Test" | gpg --encrypt -r user@domain.com | gpg --decrypt
Enter your passphrase to confirm it works.

Configure Firewall (if running on a remote machine):
Linux:
sudo ufw allow 12345

Windows:
Open Windows Defender Firewall → Advanced Settings → Inbound Rules.
Create a new rule for TCP port 12345, allow connections.
If behind a router, forward port 12345 to the server’s local IP.

Run the Server:
Start the server:

python3 server.py  # Linux
python server.py   # Windows
Output: Server running on 0.0.0.0:12345.
Note the server’s IP (e.g., 192.168.1.100 for a local network or public IP for remote access).

Run the Client:
Linux:
python3 client.py

Windows:
python client.py

Enter:
Username (e.g., alice).
GPG key ID (e.g., user@domain.com or ABCDEF1234567890).
Passphrase (hidden; press Enter if no passphrase).

Test the Client:
Startup Messages:
System: Imported X public keys (e.g., 1 if user_domain.com.pub exists).
System: Warning: Public key file keys/user_domain.com.pub not found (if missing).
System: Warning: GPG key ID user@domain.com not found in keyring (if key ID is invalid).

Connect:
Local: Default connects to 127.0.0.1:12345.
Remote: Type /connect <IP> (e.g., /connect 192.168.1.100) to connect to a remote server.

Send Messages:
Type a message (e.g., Hello) and press Enter.
If keys/user_domain.com.pub exists, the message encrypts and appears decrypted in the chat window.
If not, see: System: Cannot send message: No public key found for user@domain.com at keys/user_domain.com.pub.

Receive Messages:
Messages from others (e.g., bob) decrypt if bob_domain.com.pub is in keys/ and the passphrase is correct.
Server messages (e.g., Server: alice joined the chat) display without decryption.

Commands:
/connect <IP>: Connect to a server.
/quit or /exit: Exit the program.

Esc key: Exit with a message.

Input:
Ctrl+V: Paste text.
Backspace/Delete: Remove characters (replace curses.KEY_DC with 331 if needed for your terminal).

Verify Encryption (Optional):
Use tcpdump to confirm messages are encrypted:
sudo tcpdump -i any port 12345
Look for OpenPGP data (starts with -----BEGIN PGP MESSAGE-----).

Troubleshooting
No Public Key Found:
Ensure keys/user_domain.com.pub exists (e.g., ls keys/).
Match the filename to MY_KEY_ID (e.g., user@domain.com → user_domain.com.pub).
Re-export: gpg --armor --output keys/user_domain.com.pub --export user@domain.com.
Decryption Failed:
Verify passphrase with gpg --decrypt.
Check gpg --list-secret-keys to confirm MY_KEY_ID.

Connection Issues:
Ensure port 12345 is open on the server.
Test with ping <server_ip> or telnet <server_ip> 12345.
Delete Key:
If Delete doesn’t work, add debugging:
python
messages.append({"username": "System", "text": f"Pressed key: {char}"})
After char = stdscr.getch(), then replace curses.KEY_DC with the key code (e.g., 331).

Notes
Linux:
Use a terminal like gnome-terminal or xterm for best curses support.
Ensure keys/ has read permissions: chmod -R u+rw keys/.

Windows:
Use Windows Terminal or PowerShell for curses compatibility.
Install windows-curses for the UI.

Security:
Messages are only sent if encrypted (no plaintext fallback).
Passphrase is stored in memory; use a GPG agent for higher security if needed.

Extensions:
Add /help for command list.
Support /connect <IP>:<port> for custom ports.

